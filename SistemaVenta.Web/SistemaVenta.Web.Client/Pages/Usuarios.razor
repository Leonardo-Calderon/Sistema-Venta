@page "/usuarios"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using Microsoft.AspNetCore.Authorization
@inject IUsuarioService usuarioService
@inject IRolService rolService
@inject NavigationManager navigationManager

@* El atributo [Authorize] se elimina para evitar la redirección del servidor *@

<AuthorizeView Roles="Administrador">
    <Authorized Context="authState">
        @{
            // Todo el contenido visual de la página va aquí dentro.
            // Solo se renderizará si el usuario tiene el rol "Administrador".
        }
        <PageTitle>Gestión de Usuarios</PageTitle>

        <h1>Gestión de Usuarios</h1>
        <p>Administra los usuarios del sistema.</p>

        @if (currentView == "List")
        {
            <div class="card shadow">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Lista de Usuarios</span>
                        <button class="btn btn-primary" @onclick="ShowCreateForm">
                            <i class="oi oi-plus"></i> Nuevo Usuario
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input @bind="searchTerm" class="form-control" placeholder="Buscar usuario..." />
                                <button class="btn btn-outline-secondary" @onclick="() => LoadUsers(searchTerm)">
                                    <i class="oi oi-magnifying-glass"></i> Buscar
                                </button>
                            </div>
                        </div>
                    </div>

                    @if (userList == null)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Nombre Completo</th>
                                        <th>Nombre de Usuario</th>
                                        <th>Correo</th>
                                        <th>Rol</th>
                                        <th>Habilitado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in userList)
                                    {
                                        <tr>
                                            <td>@user.NombreCompleto</td>
                                            <td>@user.NombreUsuario</td>
                                            <td>@user.Correo</td>
                                            <td>@user.DescripcionRol</td>
                                            <td>@(user.Activo ? "Sí" : "No")</td>
                                            <td>
                                                <button class="btn btn-sm btn-warning" @onclick="() => ShowEditForm(user.IdUsuario)">
                                                    <i class="oi oi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(user.IdUsuario, user.NombreCompleto!)">
                                                    <i class="oi oi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }
        else if (currentView == "Create")
        {
            <div class="card shadow">
                <div class="card-header"><h3>Nuevo Usuario</h3></div>
                <div class="card-body">
                    <EditForm Model="userToCreate" OnValidSubmit="HandleCreate">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Nombre Completo</label>
                            <InputText class="form-control" @bind-Value="userToCreate.NombreCompleto" />
                            <ValidationMessage For="() => userToCreate.NombreCompleto" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Correo</label>
                            <InputText type="email" class="form-control" @bind-Value="userToCreate.Correo" />
                            <ValidationMessage For="() => userToCreate.Correo" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre de Usuario</label>
                            <InputText class="form-control" @bind-Value="userToCreate.NombreUsuario" />
                            <ValidationMessage For="() => userToCreate.NombreUsuario" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Rol</label>
                            <InputSelect class="form-select" @bind-Value="userToCreate.IdRol">
                                <option value="0">-- Seleccione un Rol --</option>
                                @if (roleList != null)
                                {
                                    @foreach (var rol in roleList)
                                    {
                                        <option value="@rol.IdRol">@rol.Nombre</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="() => userToCreate.IdRol" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="SwitchToList"><i class="oi oi-arrow-left"></i> Volver</button>
                            <button type="submit" class="btn btn-primary"><i class="oi oi-check"></i> Guardar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else if (currentView == "Edit")
        {
            <div class="card shadow">
                <div class="card-header"><h3>Editar Usuario</h3></div>
                <div class="card-body">
                    <EditForm Model="userToEdit" OnValidSubmit="HandleUpdate">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Nombre Completo</label>
                            <InputText class="form-control" @bind-Value="userToEdit.NombreCompleto" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Correo</label>
                            <InputText type="email" class="form-control" @bind-Value="userToEdit.Correo" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre de Usuario</label>
                            <InputText class="form-control" @bind-Value="userToEdit.NombreUsuario" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Rol</label>
                            <InputSelect class="form-select" @bind-Value="userToEdit.IdRol">
                                @if (roleList != null)
                                {
                                    @foreach (var rol in roleList)
                                    {
                                        <option value="@rol.IdRol">@rol.Nombre</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Habilitado</label>
                            <InputSelect class="form-select" @bind-Value="userToEdit.Activo">
                                <option value="true">Sí</option>
                                <option value="false">No</option>
                            </InputSelect>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="SwitchToList"><i class="oi oi-arrow-left"></i> Volver</button>
                            <button type="submit" class="btn btn-primary"><i class="oi oi-check"></i> Guardar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }


        @if (showDeleteConfirmation)
        {
            <div class="modal fade show" style="display:block" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirmar Eliminación</h5>
                            <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                        </div>
                        <div class="modal-body">
                            <p>¿Está seguro de que desea eliminar al usuario <strong>@userNameToDelete</strong>?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancelar</button>
                            <button type="button" class="btn btn-danger" @onclick="ExecuteDelete">Eliminar</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

    </Authorized>

    <NotAuthorized>
        <div class="text-center p-4" style="color:red;">
            <h1 class="display-4">Acceso Denegado</h1>
            <p class="lead">No tienes los permisos de Administrador necesarios para ver este recurso.</p>
        </div>
    </NotAuthorized>

    <Authorizing>
        <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Autorizando...</span>
            </div>
            <h4 class="ms-3">Autorizando...</h4>
        </div>
    </Authorizing>
</AuthorizeView>

@code {
    // El bloque @code se mantiene exactamente igual. No es necesario cambiar nada.

    private string currentView = "List";
    private List<UsuarioDTO>? userList;
    private List<RolDTO>? roleList;
    private string searchTerm = "";

    private UsuarioCrearDTO userToCreate = new();
    private UsuarioDTO userToEdit = new();

    private bool showDeleteConfirmation = false;
    private int userIdToDelete;
    private string? userNameToDelete;

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        await LoadUsers();
    }

    private async Task LoadUsers(string search = "")
    {
        try
        {
            userList = await usuarioService.Lista(search);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar usuarios: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task LoadRoles()
    {
        try
        {
            roleList = await rolService.Lista();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar roles: {ex.Message}";
        }
    }

    private void ShowCreateForm()
    {
        userToCreate = new UsuarioCrearDTO();
        errorMessage = null;
        currentView = "Create";
    }

    private void ShowEditForm(int id)
    {
        var user = userList?.FirstOrDefault(u => u.IdUsuario == id);
        if (user != null)
        {
            userToEdit = new UsuarioDTO
                {
                    IdUsuario = user.IdUsuario,
                    NombreCompleto = user.NombreCompleto,
                    Correo = user.Correo,
                    NombreUsuario = user.NombreUsuario,
                    IdRol = user.IdRol,
                    DescripcionRol = user.DescripcionRol,
                    Activo = user.Activo
                };
            errorMessage = null;
            currentView = "Edit";
        }
    }

    private void SwitchToList()
    {
        errorMessage = null;
        currentView = "List";
    }

    private async Task HandleCreate()
    {
        var response = await usuarioService.Crear(userToCreate);
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers();
            SwitchToList();
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private async Task HandleUpdate()
    {
        var response = await usuarioService.Editar(userToEdit);
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers();
            SwitchToList();
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private void ConfirmDelete(int id, string userName)
    {
        userIdToDelete = id;
        userNameToDelete = userName;
        showDeleteConfirmation = true;
    }

    private async Task ExecuteDelete()
    {
        var response = await usuarioService.Eliminar(userIdToDelete);
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers();
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
        CancelDelete();
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        userIdToDelete = 0;
        userNameToDelete = null;
    }
}