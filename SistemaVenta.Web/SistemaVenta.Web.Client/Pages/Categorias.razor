@page "/categorias"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@inject ICategoriaService categoriaService
@inject IMedidaService medidaService
@inject NavigationManager navigationManager

<AuthorizeView Roles="Administrador,Ventas">
    <Authorized Context="authState">
        <PageTitle>Gestión de Categorías</PageTitle>
        <h1>Gestión de Categorías</h1>

        @if (currentView == "List")
        {
            <div class="card shadow">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Lista de Categorías</span>
                        <button class="btn btn-primary" @onclick="ShowCreateForm">
                            <i class="oi oi-plus"></i> Nueva Categoría
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (categoryList == null)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Nombre</th>
                                        <th>Unidad de Medida</th>
                                        <th>Habilitado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var cat in categoryList)
                                    {
                                        <tr>
                                            <td>@cat.Nombre</td>
                                            <td>@cat.NombreMedida</td>
                                            <td>@(cat.Activo ? "Sí" : "No")</td>
                                            <td>
                                                <button class="btn btn-sm btn-warning" @onclick="() => ShowEditForm(cat)">
                                                    <i class="oi oi-pencil"></i>
                                                </button>
                                                @* Puedes añadir un botón de eliminar aquí si lo necesitas *@
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }
        else if (currentView == "Create" || currentView == "Edit")
        {
            <div class="card shadow">
                <div class="card-header"><h3>@(currentView == "Create" ? "Nueva Categoría" : "Editar Categoría")</h3></div>
                <div class="card-body">
                    <EditForm Model="categoriaModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="categoriaModel.Nombre" />
                            <ValidationMessage For="@(() => categoriaModel.Nombre)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Unidad de Medida</label>
                            <InputSelect class="form-select" @bind-Value="categoriaModel.IdMedida">
                                <option value="0">-- Seleccione --</option>
                                @if (measureList != null)
                                {
                                    @foreach (var medida in measureList)
                                    {
                                        <option value="@medida.IdMedida">@medida.Nombre</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => categoriaModel.IdMedida)" />
                        </div>

                        @if (currentView == "Edit")
                        {
                            <div class="mb-3">
                                <label class="form-label">Habilitado</label>
                                <InputSelect class="form-select" @bind-Value="categoriaModel.Activo">
                                    <option value="true">Sí</option>
                                    <option value="false">No</option>
                                </InputSelect>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">@errorMessage</div>
                        }

                        <div class="d-flex justify-content-between mt-4">
                            <button type="button" class="btn btn-secondary" @onclick="SwitchToList"><i class="oi oi-arrow-left"></i> Volver</button>
                            <button type="submit" class="btn btn-primary"><i class="oi oi-check"></i> Guardar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="text-center p-4" style="color:red;">
            <h1 class="display-4">Acceso Denegado</h1>
            <p class="lead">No tienes los permisos de Administrador necesarios para ver este recurso.</p>
        </div>
    </NotAuthorized>
    <Authorizing>
        <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Autorizando...</span>
            </div>
            <h4 class="ms-3">Autorizando...</h4>
        </div>
    </Authorizing>
</AuthorizeView>

@code {
    private string currentView = "List";
    private List<CategoriaDTO>? categoryList;
    private List<MedidaDTO>? measureList;
    private CategoriaDTO categoriaModel = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadMeasures();
        await LoadCategories();
    }

    private async Task LoadCategories(string search = "")
    {
        try
        {
            categoryList = await categoriaService.Lista(search);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar categorías: {ex.Message}";
        }
    }

    private async Task LoadMeasures()
    {
        try
        {
            measureList = await medidaService.Lista();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar medidas: {ex.Message}";
        }
    }

    private void SwitchToList()
    {
        errorMessage = null;
        currentView = "List";
    }

    private void ShowCreateForm()
    {
        categoriaModel = new CategoriaDTO { Activo = true };
        errorMessage = null;
        currentView = "Create";
    }

    private void ShowEditForm(CategoriaDTO categoriaAEditar)
    {
        categoriaModel = new CategoriaDTO
            {
                IdCategoria = categoriaAEditar.IdCategoria,
                Nombre = categoriaAEditar.Nombre,
                IdMedida = categoriaAEditar.IdMedida,
                Activo = categoriaAEditar.Activo,
                NombreMedida = categoriaAEditar.NombreMedida
            };
        errorMessage = null;
        currentView = "Edit";
    }

    private async Task HandleSubmit()
    {
        try
        {
            errorMessage = null;
            HttpResponseMessage response;

            if (currentView == "Create")
            {
                response = await categoriaService.Crear(categoriaModel);
            }
            else
            {
                response = await categoriaService.Editar(categoriaModel);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadCategories();
                SwitchToList();
            }
            else
            {
                errorMessage = $"Error al guardar: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fatal al guardar: {ex.Message}";
        }
    }
}